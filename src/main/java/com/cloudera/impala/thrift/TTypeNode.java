/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-16")
public class TTypeNode implements org.apache.thrift.TBase<TTypeNode, TTypeNode._Fields>, java.io.Serializable, Cloneable, Comparable<TTypeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTypeNode");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SCALAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scalar_type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STRUCT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_fields", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTypeNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTypeNodeTupleSchemeFactory());
  }

  /**
   * 
   * @see TTypeNodeType
   */
  public TTypeNodeType type; // required
  public TScalarType scalar_type; // optional
  public List<TStructField> struct_fields; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TTypeNodeType
     */
    TYPE((short)1, "type"),
    SCALAR_TYPE((short)2, "scalar_type"),
    STRUCT_FIELDS((short)3, "struct_fields");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // SCALAR_TYPE
          return SCALAR_TYPE;
        case 3: // STRUCT_FIELDS
          return STRUCT_FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SCALAR_TYPE,_Fields.STRUCT_FIELDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTypeNodeType.class)));
    tmpMap.put(_Fields.SCALAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scalar_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScalarType.class)));
    tmpMap.put(_Fields.STRUCT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("struct_fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStructField.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTypeNode.class, metaDataMap);
  }

  public TTypeNode() {
  }

  public TTypeNode(
    TTypeNodeType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTypeNode(TTypeNode other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetScalar_type()) {
      this.scalar_type = new TScalarType(other.scalar_type);
    }
    if (other.isSetStruct_fields()) {
      List<TStructField> __this__struct_fields = new ArrayList<TStructField>(other.struct_fields.size());
      for (TStructField other_element : other.struct_fields) {
        __this__struct_fields.add(new TStructField(other_element));
      }
      this.struct_fields = __this__struct_fields;
    }
  }

  public TTypeNode deepCopy() {
    return new TTypeNode(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.scalar_type = null;
    this.struct_fields = null;
  }

  /**
   * 
   * @see TTypeNodeType
   */
  public TTypeNodeType getType() {
    return this.type;
  }

  /**
   * 
   * @see TTypeNodeType
   */
  public TTypeNode setType(TTypeNodeType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public TScalarType getScalar_type() {
    return this.scalar_type;
  }

  public TTypeNode setScalar_type(TScalarType scalar_type) {
    this.scalar_type = scalar_type;
    return this;
  }

  public void unsetScalar_type() {
    this.scalar_type = null;
  }

  /** Returns true if field scalar_type is set (has been assigned a value) and false otherwise */
  public boolean isSetScalar_type() {
    return this.scalar_type != null;
  }

  public void setScalar_typeIsSet(boolean value) {
    if (!value) {
      this.scalar_type = null;
    }
  }

  public int getStruct_fieldsSize() {
    return (this.struct_fields == null) ? 0 : this.struct_fields.size();
  }

  public java.util.Iterator<TStructField> getStruct_fieldsIterator() {
    return (this.struct_fields == null) ? null : this.struct_fields.iterator();
  }

  public void addToStruct_fields(TStructField elem) {
    if (this.struct_fields == null) {
      this.struct_fields = new ArrayList<TStructField>();
    }
    this.struct_fields.add(elem);
  }

  public List<TStructField> getStruct_fields() {
    return this.struct_fields;
  }

  public TTypeNode setStruct_fields(List<TStructField> struct_fields) {
    this.struct_fields = struct_fields;
    return this;
  }

  public void unsetStruct_fields() {
    this.struct_fields = null;
  }

  /** Returns true if field struct_fields is set (has been assigned a value) and false otherwise */
  public boolean isSetStruct_fields() {
    return this.struct_fields != null;
  }

  public void setStruct_fieldsIsSet(boolean value) {
    if (!value) {
      this.struct_fields = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TTypeNodeType)value);
      }
      break;

    case SCALAR_TYPE:
      if (value == null) {
        unsetScalar_type();
      } else {
        setScalar_type((TScalarType)value);
      }
      break;

    case STRUCT_FIELDS:
      if (value == null) {
        unsetStruct_fields();
      } else {
        setStruct_fields((List<TStructField>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case SCALAR_TYPE:
      return getScalar_type();

    case STRUCT_FIELDS:
      return getStruct_fields();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case SCALAR_TYPE:
      return isSetScalar_type();
    case STRUCT_FIELDS:
      return isSetStruct_fields();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTypeNode)
      return this.equals((TTypeNode)that);
    return false;
  }

  public boolean equals(TTypeNode that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_scalar_type = true && this.isSetScalar_type();
    boolean that_present_scalar_type = true && that.isSetScalar_type();
    if (this_present_scalar_type || that_present_scalar_type) {
      if (!(this_present_scalar_type && that_present_scalar_type))
        return false;
      if (!this.scalar_type.equals(that.scalar_type))
        return false;
    }

    boolean this_present_struct_fields = true && this.isSetStruct_fields();
    boolean that_present_struct_fields = true && that.isSetStruct_fields();
    if (this_present_struct_fields || that_present_struct_fields) {
      if (!(this_present_struct_fields && that_present_struct_fields))
        return false;
      if (!this.struct_fields.equals(that.struct_fields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_scalar_type = true && (isSetScalar_type());
    list.add(present_scalar_type);
    if (present_scalar_type)
      list.add(scalar_type);

    boolean present_struct_fields = true && (isSetStruct_fields());
    list.add(present_struct_fields);
    if (present_struct_fields)
      list.add(struct_fields);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTypeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScalar_type()).compareTo(other.isSetScalar_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScalar_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scalar_type, other.scalar_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStruct_fields()).compareTo(other.isSetStruct_fields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStruct_fields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.struct_fields, other.struct_fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTypeNode(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetScalar_type()) {
      if (!first) sb.append(", ");
      sb.append("scalar_type:");
      if (this.scalar_type == null) {
        sb.append("null");
      } else {
        sb.append(this.scalar_type);
      }
      first = false;
    }
    if (isSetStruct_fields()) {
      if (!first) sb.append(", ");
      sb.append("struct_fields:");
      if (this.struct_fields == null) {
        sb.append("null");
      } else {
        sb.append(this.struct_fields);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (scalar_type != null) {
      scalar_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTypeNodeStandardSchemeFactory implements SchemeFactory {
    public TTypeNodeStandardScheme getScheme() {
      return new TTypeNodeStandardScheme();
    }
  }

  private static class TTypeNodeStandardScheme extends StandardScheme<TTypeNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTypeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.cloudera.impala.thrift.TTypeNodeType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCALAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scalar_type = new TScalarType();
              struct.scalar_type.read(iprot);
              struct.setScalar_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRUCT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.struct_fields = new ArrayList<TStructField>(_list0.size);
                TStructField _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TStructField();
                  _elem1.read(iprot);
                  struct.struct_fields.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStruct_fieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTypeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.scalar_type != null) {
        if (struct.isSetScalar_type()) {
          oprot.writeFieldBegin(SCALAR_TYPE_FIELD_DESC);
          struct.scalar_type.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.struct_fields != null) {
        if (struct.isSetStruct_fields()) {
          oprot.writeFieldBegin(STRUCT_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.struct_fields.size()));
            for (TStructField _iter3 : struct.struct_fields)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTypeNodeTupleSchemeFactory implements SchemeFactory {
    public TTypeNodeTupleScheme getScheme() {
      return new TTypeNodeTupleScheme();
    }
  }

  private static class TTypeNodeTupleScheme extends TupleScheme<TTypeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTypeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetScalar_type()) {
        optionals.set(0);
      }
      if (struct.isSetStruct_fields()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetScalar_type()) {
        struct.scalar_type.write(oprot);
      }
      if (struct.isSetStruct_fields()) {
        {
          oprot.writeI32(struct.struct_fields.size());
          for (TStructField _iter4 : struct.struct_fields)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTypeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.cloudera.impala.thrift.TTypeNodeType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.scalar_type = new TScalarType();
        struct.scalar_type.read(iprot);
        struct.setScalar_typeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.struct_fields = new ArrayList<TStructField>(_list5.size);
          TStructField _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TStructField();
            _elem6.read(iprot);
            struct.struct_fields.add(_elem6);
          }
        }
        struct.setStruct_fieldsIsSet(true);
      }
    }
  }

}

