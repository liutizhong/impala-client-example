/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-16")
public class TAggregateFunction implements org.apache.thrift.TBase<TAggregateFunction, TAggregateFunction._Fields>, java.io.Serializable, Cloneable, Comparable<TAggregateFunction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggregateFunction");

  private static final org.apache.thrift.protocol.TField INTERMEDIATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediate_type", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField UPDATE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("update_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INIT_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("init_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERIALIZE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("serialize_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MERGE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FINALIZE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("finalize_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GET_VALUE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("get_value_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMOVE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("remove_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IGNORES_DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("ignores_distinct", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAggregateFunctionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAggregateFunctionTupleSchemeFactory());
  }

  public TColumnType intermediate_type; // required
  public String update_fn_symbol; // required
  public String init_fn_symbol; // required
  public String serialize_fn_symbol; // optional
  public String merge_fn_symbol; // optional
  public String finalize_fn_symbol; // optional
  public String get_value_fn_symbol; // optional
  public String remove_fn_symbol; // optional
  public boolean ignores_distinct; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERMEDIATE_TYPE((short)1, "intermediate_type"),
    UPDATE_FN_SYMBOL((short)2, "update_fn_symbol"),
    INIT_FN_SYMBOL((short)3, "init_fn_symbol"),
    SERIALIZE_FN_SYMBOL((short)4, "serialize_fn_symbol"),
    MERGE_FN_SYMBOL((short)5, "merge_fn_symbol"),
    FINALIZE_FN_SYMBOL((short)6, "finalize_fn_symbol"),
    GET_VALUE_FN_SYMBOL((short)8, "get_value_fn_symbol"),
    REMOVE_FN_SYMBOL((short)9, "remove_fn_symbol"),
    IGNORES_DISTINCT((short)7, "ignores_distinct");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERMEDIATE_TYPE
          return INTERMEDIATE_TYPE;
        case 2: // UPDATE_FN_SYMBOL
          return UPDATE_FN_SYMBOL;
        case 3: // INIT_FN_SYMBOL
          return INIT_FN_SYMBOL;
        case 4: // SERIALIZE_FN_SYMBOL
          return SERIALIZE_FN_SYMBOL;
        case 5: // MERGE_FN_SYMBOL
          return MERGE_FN_SYMBOL;
        case 6: // FINALIZE_FN_SYMBOL
          return FINALIZE_FN_SYMBOL;
        case 8: // GET_VALUE_FN_SYMBOL
          return GET_VALUE_FN_SYMBOL;
        case 9: // REMOVE_FN_SYMBOL
          return REMOVE_FN_SYMBOL;
        case 7: // IGNORES_DISTINCT
          return IGNORES_DISTINCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IGNORES_DISTINCT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SERIALIZE_FN_SYMBOL,_Fields.MERGE_FN_SYMBOL,_Fields.FINALIZE_FN_SYMBOL,_Fields.GET_VALUE_FN_SYMBOL,_Fields.REMOVE_FN_SYMBOL,_Fields.IGNORES_DISTINCT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERMEDIATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("intermediate_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnType.class)));
    tmpMap.put(_Fields.UPDATE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("update_fn_symbol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INIT_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("init_fn_symbol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIALIZE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("serialize_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERGE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("merge_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINALIZE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("finalize_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_VALUE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("get_value_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOVE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("remove_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IGNORES_DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("ignores_distinct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggregateFunction.class, metaDataMap);
  }

  public TAggregateFunction() {
  }

  public TAggregateFunction(
    TColumnType intermediate_type,
    String update_fn_symbol,
    String init_fn_symbol)
  {
    this();
    this.intermediate_type = intermediate_type;
    this.update_fn_symbol = update_fn_symbol;
    this.init_fn_symbol = init_fn_symbol;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggregateFunction(TAggregateFunction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIntermediate_type()) {
      this.intermediate_type = new TColumnType(other.intermediate_type);
    }
    if (other.isSetUpdate_fn_symbol()) {
      this.update_fn_symbol = other.update_fn_symbol;
    }
    if (other.isSetInit_fn_symbol()) {
      this.init_fn_symbol = other.init_fn_symbol;
    }
    if (other.isSetSerialize_fn_symbol()) {
      this.serialize_fn_symbol = other.serialize_fn_symbol;
    }
    if (other.isSetMerge_fn_symbol()) {
      this.merge_fn_symbol = other.merge_fn_symbol;
    }
    if (other.isSetFinalize_fn_symbol()) {
      this.finalize_fn_symbol = other.finalize_fn_symbol;
    }
    if (other.isSetGet_value_fn_symbol()) {
      this.get_value_fn_symbol = other.get_value_fn_symbol;
    }
    if (other.isSetRemove_fn_symbol()) {
      this.remove_fn_symbol = other.remove_fn_symbol;
    }
    this.ignores_distinct = other.ignores_distinct;
  }

  public TAggregateFunction deepCopy() {
    return new TAggregateFunction(this);
  }

  @Override
  public void clear() {
    this.intermediate_type = null;
    this.update_fn_symbol = null;
    this.init_fn_symbol = null;
    this.serialize_fn_symbol = null;
    this.merge_fn_symbol = null;
    this.finalize_fn_symbol = null;
    this.get_value_fn_symbol = null;
    this.remove_fn_symbol = null;
    setIgnores_distinctIsSet(false);
    this.ignores_distinct = false;
  }

  public TColumnType getIntermediate_type() {
    return this.intermediate_type;
  }

  public TAggregateFunction setIntermediate_type(TColumnType intermediate_type) {
    this.intermediate_type = intermediate_type;
    return this;
  }

  public void unsetIntermediate_type() {
    this.intermediate_type = null;
  }

  /** Returns true if field intermediate_type is set (has been assigned a value) and false otherwise */
  public boolean isSetIntermediate_type() {
    return this.intermediate_type != null;
  }

  public void setIntermediate_typeIsSet(boolean value) {
    if (!value) {
      this.intermediate_type = null;
    }
  }

  public String getUpdate_fn_symbol() {
    return this.update_fn_symbol;
  }

  public TAggregateFunction setUpdate_fn_symbol(String update_fn_symbol) {
    this.update_fn_symbol = update_fn_symbol;
    return this;
  }

  public void unsetUpdate_fn_symbol() {
    this.update_fn_symbol = null;
  }

  /** Returns true if field update_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_fn_symbol() {
    return this.update_fn_symbol != null;
  }

  public void setUpdate_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.update_fn_symbol = null;
    }
  }

  public String getInit_fn_symbol() {
    return this.init_fn_symbol;
  }

  public TAggregateFunction setInit_fn_symbol(String init_fn_symbol) {
    this.init_fn_symbol = init_fn_symbol;
    return this;
  }

  public void unsetInit_fn_symbol() {
    this.init_fn_symbol = null;
  }

  /** Returns true if field init_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetInit_fn_symbol() {
    return this.init_fn_symbol != null;
  }

  public void setInit_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.init_fn_symbol = null;
    }
  }

  public String getSerialize_fn_symbol() {
    return this.serialize_fn_symbol;
  }

  public TAggregateFunction setSerialize_fn_symbol(String serialize_fn_symbol) {
    this.serialize_fn_symbol = serialize_fn_symbol;
    return this;
  }

  public void unsetSerialize_fn_symbol() {
    this.serialize_fn_symbol = null;
  }

  /** Returns true if field serialize_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialize_fn_symbol() {
    return this.serialize_fn_symbol != null;
  }

  public void setSerialize_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.serialize_fn_symbol = null;
    }
  }

  public String getMerge_fn_symbol() {
    return this.merge_fn_symbol;
  }

  public TAggregateFunction setMerge_fn_symbol(String merge_fn_symbol) {
    this.merge_fn_symbol = merge_fn_symbol;
    return this;
  }

  public void unsetMerge_fn_symbol() {
    this.merge_fn_symbol = null;
  }

  /** Returns true if field merge_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_fn_symbol() {
    return this.merge_fn_symbol != null;
  }

  public void setMerge_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.merge_fn_symbol = null;
    }
  }

  public String getFinalize_fn_symbol() {
    return this.finalize_fn_symbol;
  }

  public TAggregateFunction setFinalize_fn_symbol(String finalize_fn_symbol) {
    this.finalize_fn_symbol = finalize_fn_symbol;
    return this;
  }

  public void unsetFinalize_fn_symbol() {
    this.finalize_fn_symbol = null;
  }

  /** Returns true if field finalize_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetFinalize_fn_symbol() {
    return this.finalize_fn_symbol != null;
  }

  public void setFinalize_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.finalize_fn_symbol = null;
    }
  }

  public String getGet_value_fn_symbol() {
    return this.get_value_fn_symbol;
  }

  public TAggregateFunction setGet_value_fn_symbol(String get_value_fn_symbol) {
    this.get_value_fn_symbol = get_value_fn_symbol;
    return this;
  }

  public void unsetGet_value_fn_symbol() {
    this.get_value_fn_symbol = null;
  }

  /** Returns true if field get_value_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_value_fn_symbol() {
    return this.get_value_fn_symbol != null;
  }

  public void setGet_value_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.get_value_fn_symbol = null;
    }
  }

  public String getRemove_fn_symbol() {
    return this.remove_fn_symbol;
  }

  public TAggregateFunction setRemove_fn_symbol(String remove_fn_symbol) {
    this.remove_fn_symbol = remove_fn_symbol;
    return this;
  }

  public void unsetRemove_fn_symbol() {
    this.remove_fn_symbol = null;
  }

  /** Returns true if field remove_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetRemove_fn_symbol() {
    return this.remove_fn_symbol != null;
  }

  public void setRemove_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.remove_fn_symbol = null;
    }
  }

  public boolean isIgnores_distinct() {
    return this.ignores_distinct;
  }

  public TAggregateFunction setIgnores_distinct(boolean ignores_distinct) {
    this.ignores_distinct = ignores_distinct;
    setIgnores_distinctIsSet(true);
    return this;
  }

  public void unsetIgnores_distinct() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IGNORES_DISTINCT_ISSET_ID);
  }

  /** Returns true if field ignores_distinct is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnores_distinct() {
    return EncodingUtils.testBit(__isset_bitfield, __IGNORES_DISTINCT_ISSET_ID);
  }

  public void setIgnores_distinctIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IGNORES_DISTINCT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERMEDIATE_TYPE:
      if (value == null) {
        unsetIntermediate_type();
      } else {
        setIntermediate_type((TColumnType)value);
      }
      break;

    case UPDATE_FN_SYMBOL:
      if (value == null) {
        unsetUpdate_fn_symbol();
      } else {
        setUpdate_fn_symbol((String)value);
      }
      break;

    case INIT_FN_SYMBOL:
      if (value == null) {
        unsetInit_fn_symbol();
      } else {
        setInit_fn_symbol((String)value);
      }
      break;

    case SERIALIZE_FN_SYMBOL:
      if (value == null) {
        unsetSerialize_fn_symbol();
      } else {
        setSerialize_fn_symbol((String)value);
      }
      break;

    case MERGE_FN_SYMBOL:
      if (value == null) {
        unsetMerge_fn_symbol();
      } else {
        setMerge_fn_symbol((String)value);
      }
      break;

    case FINALIZE_FN_SYMBOL:
      if (value == null) {
        unsetFinalize_fn_symbol();
      } else {
        setFinalize_fn_symbol((String)value);
      }
      break;

    case GET_VALUE_FN_SYMBOL:
      if (value == null) {
        unsetGet_value_fn_symbol();
      } else {
        setGet_value_fn_symbol((String)value);
      }
      break;

    case REMOVE_FN_SYMBOL:
      if (value == null) {
        unsetRemove_fn_symbol();
      } else {
        setRemove_fn_symbol((String)value);
      }
      break;

    case IGNORES_DISTINCT:
      if (value == null) {
        unsetIgnores_distinct();
      } else {
        setIgnores_distinct((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERMEDIATE_TYPE:
      return getIntermediate_type();

    case UPDATE_FN_SYMBOL:
      return getUpdate_fn_symbol();

    case INIT_FN_SYMBOL:
      return getInit_fn_symbol();

    case SERIALIZE_FN_SYMBOL:
      return getSerialize_fn_symbol();

    case MERGE_FN_SYMBOL:
      return getMerge_fn_symbol();

    case FINALIZE_FN_SYMBOL:
      return getFinalize_fn_symbol();

    case GET_VALUE_FN_SYMBOL:
      return getGet_value_fn_symbol();

    case REMOVE_FN_SYMBOL:
      return getRemove_fn_symbol();

    case IGNORES_DISTINCT:
      return isIgnores_distinct();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERMEDIATE_TYPE:
      return isSetIntermediate_type();
    case UPDATE_FN_SYMBOL:
      return isSetUpdate_fn_symbol();
    case INIT_FN_SYMBOL:
      return isSetInit_fn_symbol();
    case SERIALIZE_FN_SYMBOL:
      return isSetSerialize_fn_symbol();
    case MERGE_FN_SYMBOL:
      return isSetMerge_fn_symbol();
    case FINALIZE_FN_SYMBOL:
      return isSetFinalize_fn_symbol();
    case GET_VALUE_FN_SYMBOL:
      return isSetGet_value_fn_symbol();
    case REMOVE_FN_SYMBOL:
      return isSetRemove_fn_symbol();
    case IGNORES_DISTINCT:
      return isSetIgnores_distinct();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAggregateFunction)
      return this.equals((TAggregateFunction)that);
    return false;
  }

  public boolean equals(TAggregateFunction that) {
    if (that == null)
      return false;

    boolean this_present_intermediate_type = true && this.isSetIntermediate_type();
    boolean that_present_intermediate_type = true && that.isSetIntermediate_type();
    if (this_present_intermediate_type || that_present_intermediate_type) {
      if (!(this_present_intermediate_type && that_present_intermediate_type))
        return false;
      if (!this.intermediate_type.equals(that.intermediate_type))
        return false;
    }

    boolean this_present_update_fn_symbol = true && this.isSetUpdate_fn_symbol();
    boolean that_present_update_fn_symbol = true && that.isSetUpdate_fn_symbol();
    if (this_present_update_fn_symbol || that_present_update_fn_symbol) {
      if (!(this_present_update_fn_symbol && that_present_update_fn_symbol))
        return false;
      if (!this.update_fn_symbol.equals(that.update_fn_symbol))
        return false;
    }

    boolean this_present_init_fn_symbol = true && this.isSetInit_fn_symbol();
    boolean that_present_init_fn_symbol = true && that.isSetInit_fn_symbol();
    if (this_present_init_fn_symbol || that_present_init_fn_symbol) {
      if (!(this_present_init_fn_symbol && that_present_init_fn_symbol))
        return false;
      if (!this.init_fn_symbol.equals(that.init_fn_symbol))
        return false;
    }

    boolean this_present_serialize_fn_symbol = true && this.isSetSerialize_fn_symbol();
    boolean that_present_serialize_fn_symbol = true && that.isSetSerialize_fn_symbol();
    if (this_present_serialize_fn_symbol || that_present_serialize_fn_symbol) {
      if (!(this_present_serialize_fn_symbol && that_present_serialize_fn_symbol))
        return false;
      if (!this.serialize_fn_symbol.equals(that.serialize_fn_symbol))
        return false;
    }

    boolean this_present_merge_fn_symbol = true && this.isSetMerge_fn_symbol();
    boolean that_present_merge_fn_symbol = true && that.isSetMerge_fn_symbol();
    if (this_present_merge_fn_symbol || that_present_merge_fn_symbol) {
      if (!(this_present_merge_fn_symbol && that_present_merge_fn_symbol))
        return false;
      if (!this.merge_fn_symbol.equals(that.merge_fn_symbol))
        return false;
    }

    boolean this_present_finalize_fn_symbol = true && this.isSetFinalize_fn_symbol();
    boolean that_present_finalize_fn_symbol = true && that.isSetFinalize_fn_symbol();
    if (this_present_finalize_fn_symbol || that_present_finalize_fn_symbol) {
      if (!(this_present_finalize_fn_symbol && that_present_finalize_fn_symbol))
        return false;
      if (!this.finalize_fn_symbol.equals(that.finalize_fn_symbol))
        return false;
    }

    boolean this_present_get_value_fn_symbol = true && this.isSetGet_value_fn_symbol();
    boolean that_present_get_value_fn_symbol = true && that.isSetGet_value_fn_symbol();
    if (this_present_get_value_fn_symbol || that_present_get_value_fn_symbol) {
      if (!(this_present_get_value_fn_symbol && that_present_get_value_fn_symbol))
        return false;
      if (!this.get_value_fn_symbol.equals(that.get_value_fn_symbol))
        return false;
    }

    boolean this_present_remove_fn_symbol = true && this.isSetRemove_fn_symbol();
    boolean that_present_remove_fn_symbol = true && that.isSetRemove_fn_symbol();
    if (this_present_remove_fn_symbol || that_present_remove_fn_symbol) {
      if (!(this_present_remove_fn_symbol && that_present_remove_fn_symbol))
        return false;
      if (!this.remove_fn_symbol.equals(that.remove_fn_symbol))
        return false;
    }

    boolean this_present_ignores_distinct = true && this.isSetIgnores_distinct();
    boolean that_present_ignores_distinct = true && that.isSetIgnores_distinct();
    if (this_present_ignores_distinct || that_present_ignores_distinct) {
      if (!(this_present_ignores_distinct && that_present_ignores_distinct))
        return false;
      if (this.ignores_distinct != that.ignores_distinct)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_intermediate_type = true && (isSetIntermediate_type());
    list.add(present_intermediate_type);
    if (present_intermediate_type)
      list.add(intermediate_type);

    boolean present_update_fn_symbol = true && (isSetUpdate_fn_symbol());
    list.add(present_update_fn_symbol);
    if (present_update_fn_symbol)
      list.add(update_fn_symbol);

    boolean present_init_fn_symbol = true && (isSetInit_fn_symbol());
    list.add(present_init_fn_symbol);
    if (present_init_fn_symbol)
      list.add(init_fn_symbol);

    boolean present_serialize_fn_symbol = true && (isSetSerialize_fn_symbol());
    list.add(present_serialize_fn_symbol);
    if (present_serialize_fn_symbol)
      list.add(serialize_fn_symbol);

    boolean present_merge_fn_symbol = true && (isSetMerge_fn_symbol());
    list.add(present_merge_fn_symbol);
    if (present_merge_fn_symbol)
      list.add(merge_fn_symbol);

    boolean present_finalize_fn_symbol = true && (isSetFinalize_fn_symbol());
    list.add(present_finalize_fn_symbol);
    if (present_finalize_fn_symbol)
      list.add(finalize_fn_symbol);

    boolean present_get_value_fn_symbol = true && (isSetGet_value_fn_symbol());
    list.add(present_get_value_fn_symbol);
    if (present_get_value_fn_symbol)
      list.add(get_value_fn_symbol);

    boolean present_remove_fn_symbol = true && (isSetRemove_fn_symbol());
    list.add(present_remove_fn_symbol);
    if (present_remove_fn_symbol)
      list.add(remove_fn_symbol);

    boolean present_ignores_distinct = true && (isSetIgnores_distinct());
    list.add(present_ignores_distinct);
    if (present_ignores_distinct)
      list.add(ignores_distinct);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAggregateFunction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIntermediate_type()).compareTo(other.isSetIntermediate_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntermediate_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediate_type, other.intermediate_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_fn_symbol()).compareTo(other.isSetUpdate_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_fn_symbol, other.update_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInit_fn_symbol()).compareTo(other.isSetInit_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInit_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.init_fn_symbol, other.init_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialize_fn_symbol()).compareTo(other.isSetSerialize_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialize_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialize_fn_symbol, other.serialize_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerge_fn_symbol()).compareTo(other.isSetMerge_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_fn_symbol, other.merge_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalize_fn_symbol()).compareTo(other.isSetFinalize_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalize_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finalize_fn_symbol, other.finalize_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_value_fn_symbol()).compareTo(other.isSetGet_value_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_value_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_value_fn_symbol, other.get_value_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemove_fn_symbol()).compareTo(other.isSetRemove_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemove_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remove_fn_symbol, other.remove_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIgnores_distinct()).compareTo(other.isSetIgnores_distinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnores_distinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignores_distinct, other.ignores_distinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAggregateFunction(");
    boolean first = true;

    sb.append("intermediate_type:");
    if (this.intermediate_type == null) {
      sb.append("null");
    } else {
      sb.append(this.intermediate_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_fn_symbol:");
    if (this.update_fn_symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.update_fn_symbol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("init_fn_symbol:");
    if (this.init_fn_symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.init_fn_symbol);
    }
    first = false;
    if (isSetSerialize_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("serialize_fn_symbol:");
      if (this.serialize_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.serialize_fn_symbol);
      }
      first = false;
    }
    if (isSetMerge_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("merge_fn_symbol:");
      if (this.merge_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.merge_fn_symbol);
      }
      first = false;
    }
    if (isSetFinalize_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("finalize_fn_symbol:");
      if (this.finalize_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.finalize_fn_symbol);
      }
      first = false;
    }
    if (isSetGet_value_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("get_value_fn_symbol:");
      if (this.get_value_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.get_value_fn_symbol);
      }
      first = false;
    }
    if (isSetRemove_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("remove_fn_symbol:");
      if (this.remove_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.remove_fn_symbol);
      }
      first = false;
    }
    if (isSetIgnores_distinct()) {
      if (!first) sb.append(", ");
      sb.append("ignores_distinct:");
      sb.append(this.ignores_distinct);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (intermediate_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'intermediate_type' was not present! Struct: " + toString());
    }
    if (update_fn_symbol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'update_fn_symbol' was not present! Struct: " + toString());
    }
    if (init_fn_symbol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'init_fn_symbol' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (intermediate_type != null) {
      intermediate_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggregateFunctionStandardSchemeFactory implements SchemeFactory {
    public TAggregateFunctionStandardScheme getScheme() {
      return new TAggregateFunctionStandardScheme();
    }
  }

  private static class TAggregateFunctionStandardScheme extends StandardScheme<TAggregateFunction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggregateFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERMEDIATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.intermediate_type = new TColumnType();
              struct.intermediate_type.read(iprot);
              struct.setIntermediate_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UPDATE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_fn_symbol = iprot.readString();
              struct.setUpdate_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INIT_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.init_fn_symbol = iprot.readString();
              struct.setInit_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERIALIZE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialize_fn_symbol = iprot.readString();
              struct.setSerialize_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERGE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merge_fn_symbol = iprot.readString();
              struct.setMerge_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINALIZE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finalize_fn_symbol = iprot.readString();
              struct.setFinalize_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GET_VALUE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.get_value_fn_symbol = iprot.readString();
              struct.setGet_value_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMOVE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remove_fn_symbol = iprot.readString();
              struct.setRemove_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IGNORES_DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignores_distinct = iprot.readBool();
              struct.setIgnores_distinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggregateFunction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.intermediate_type != null) {
        oprot.writeFieldBegin(INTERMEDIATE_TYPE_FIELD_DESC);
        struct.intermediate_type.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.update_fn_symbol != null) {
        oprot.writeFieldBegin(UPDATE_FN_SYMBOL_FIELD_DESC);
        oprot.writeString(struct.update_fn_symbol);
        oprot.writeFieldEnd();
      }
      if (struct.init_fn_symbol != null) {
        oprot.writeFieldBegin(INIT_FN_SYMBOL_FIELD_DESC);
        oprot.writeString(struct.init_fn_symbol);
        oprot.writeFieldEnd();
      }
      if (struct.serialize_fn_symbol != null) {
        if (struct.isSetSerialize_fn_symbol()) {
          oprot.writeFieldBegin(SERIALIZE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.serialize_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merge_fn_symbol != null) {
        if (struct.isSetMerge_fn_symbol()) {
          oprot.writeFieldBegin(MERGE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.merge_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finalize_fn_symbol != null) {
        if (struct.isSetFinalize_fn_symbol()) {
          oprot.writeFieldBegin(FINALIZE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.finalize_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIgnores_distinct()) {
        oprot.writeFieldBegin(IGNORES_DISTINCT_FIELD_DESC);
        oprot.writeBool(struct.ignores_distinct);
        oprot.writeFieldEnd();
      }
      if (struct.get_value_fn_symbol != null) {
        if (struct.isSetGet_value_fn_symbol()) {
          oprot.writeFieldBegin(GET_VALUE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.get_value_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remove_fn_symbol != null) {
        if (struct.isSetRemove_fn_symbol()) {
          oprot.writeFieldBegin(REMOVE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.remove_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggregateFunctionTupleSchemeFactory implements SchemeFactory {
    public TAggregateFunctionTupleScheme getScheme() {
      return new TAggregateFunctionTupleScheme();
    }
  }

  private static class TAggregateFunctionTupleScheme extends TupleScheme<TAggregateFunction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggregateFunction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.intermediate_type.write(oprot);
      oprot.writeString(struct.update_fn_symbol);
      oprot.writeString(struct.init_fn_symbol);
      BitSet optionals = new BitSet();
      if (struct.isSetSerialize_fn_symbol()) {
        optionals.set(0);
      }
      if (struct.isSetMerge_fn_symbol()) {
        optionals.set(1);
      }
      if (struct.isSetFinalize_fn_symbol()) {
        optionals.set(2);
      }
      if (struct.isSetGet_value_fn_symbol()) {
        optionals.set(3);
      }
      if (struct.isSetRemove_fn_symbol()) {
        optionals.set(4);
      }
      if (struct.isSetIgnores_distinct()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSerialize_fn_symbol()) {
        oprot.writeString(struct.serialize_fn_symbol);
      }
      if (struct.isSetMerge_fn_symbol()) {
        oprot.writeString(struct.merge_fn_symbol);
      }
      if (struct.isSetFinalize_fn_symbol()) {
        oprot.writeString(struct.finalize_fn_symbol);
      }
      if (struct.isSetGet_value_fn_symbol()) {
        oprot.writeString(struct.get_value_fn_symbol);
      }
      if (struct.isSetRemove_fn_symbol()) {
        oprot.writeString(struct.remove_fn_symbol);
      }
      if (struct.isSetIgnores_distinct()) {
        oprot.writeBool(struct.ignores_distinct);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggregateFunction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.intermediate_type = new TColumnType();
      struct.intermediate_type.read(iprot);
      struct.setIntermediate_typeIsSet(true);
      struct.update_fn_symbol = iprot.readString();
      struct.setUpdate_fn_symbolIsSet(true);
      struct.init_fn_symbol = iprot.readString();
      struct.setInit_fn_symbolIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.serialize_fn_symbol = iprot.readString();
        struct.setSerialize_fn_symbolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merge_fn_symbol = iprot.readString();
        struct.setMerge_fn_symbolIsSet(true);
      }
      if (incoming.get(2)) {
        struct.finalize_fn_symbol = iprot.readString();
        struct.setFinalize_fn_symbolIsSet(true);
      }
      if (incoming.get(3)) {
        struct.get_value_fn_symbol = iprot.readString();
        struct.setGet_value_fn_symbolIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remove_fn_symbol = iprot.readString();
        struct.setRemove_fn_symbolIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ignores_distinct = iprot.readBool();
        struct.setIgnores_distinctIsSet(true);
      }
    }
  }

}

