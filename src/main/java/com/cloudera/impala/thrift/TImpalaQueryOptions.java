/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum TImpalaQueryOptions implements org.apache.thrift.TEnum {
  ABORT_ON_ERROR(0),
  MAX_ERRORS(1),
  DISABLE_CODEGEN(2),
  BATCH_SIZE(3),
  MEM_LIMIT(4),
  NUM_NODES(5),
  MAX_SCAN_RANGE_LENGTH(6),
  MAX_IO_BUFFERS(7),
  NUM_SCANNER_THREADS(8),
  ALLOW_UNSUPPORTED_FORMATS(9),
  DEFAULT_ORDER_BY_LIMIT(10),
  DEBUG_ACTION(11),
  ABORT_ON_DEFAULT_LIMIT_EXCEEDED(12),
  COMPRESSION_CODEC(13),
  SEQ_COMPRESSION_MODE(14),
  HBASE_CACHING(15),
  HBASE_CACHE_BLOCKS(16),
  PARQUET_FILE_SIZE(17),
  EXPLAIN_LEVEL(18),
  SYNC_DDL(19),
  REQUEST_POOL(20),
  V_CPU_CORES(21),
  RESERVATION_REQUEST_TIMEOUT(22),
  DISABLE_CACHED_READS(23),
  DISABLE_OUTERMOST_TOPN(24),
  RM_INITIAL_MEM(25),
  QUERY_TIMEOUT_S(26),
  MAX_BLOCK_MGR_MEMORY(27),
  APPX_COUNT_DISTINCT(28),
  DISABLE_UNSAFE_SPILLS(29),
  EXEC_SINGLE_NODE_ROWS_THRESHOLD(30),
  OPTIMIZE_PARTITION_KEY_SCANS(31),
  SCHEDULE_RANDOM_REPLICA(32),
  SCAN_NODE_CODEGEN_THRESHOLD(33),
  DISABLE_STREAMING_PREAGGREGATIONS(34),
  RUNTIME_FILTER_MODE(35),
  RUNTIME_BLOOM_FILTER_SIZE(36),
  RUNTIME_FILTER_WAIT_TIME_MS(37),
  DISABLE_ROW_RUNTIME_FILTERING(38),
  MAX_NUM_RUNTIME_FILTERS(39),
  PARQUET_ANNOTATE_STRINGS_UTF8(40),
  PARQUET_FALLBACK_SCHEMA_RESOLUTION(41),
  MT_NUM_CORES(42),
  S3_SKIP_INSERT_STAGING(43),
  RUNTIME_FILTER_MAX_SIZE(44),
  RUNTIME_FILTER_MIN_SIZE(45),
  PREFETCH_MODE(46),
  STRICT_MODE(47);

  private final int value;

  private TImpalaQueryOptions(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TImpalaQueryOptions findByValue(int value) { 
    switch (value) {
      case 0:
        return ABORT_ON_ERROR;
      case 1:
        return MAX_ERRORS;
      case 2:
        return DISABLE_CODEGEN;
      case 3:
        return BATCH_SIZE;
      case 4:
        return MEM_LIMIT;
      case 5:
        return NUM_NODES;
      case 6:
        return MAX_SCAN_RANGE_LENGTH;
      case 7:
        return MAX_IO_BUFFERS;
      case 8:
        return NUM_SCANNER_THREADS;
      case 9:
        return ALLOW_UNSUPPORTED_FORMATS;
      case 10:
        return DEFAULT_ORDER_BY_LIMIT;
      case 11:
        return DEBUG_ACTION;
      case 12:
        return ABORT_ON_DEFAULT_LIMIT_EXCEEDED;
      case 13:
        return COMPRESSION_CODEC;
      case 14:
        return SEQ_COMPRESSION_MODE;
      case 15:
        return HBASE_CACHING;
      case 16:
        return HBASE_CACHE_BLOCKS;
      case 17:
        return PARQUET_FILE_SIZE;
      case 18:
        return EXPLAIN_LEVEL;
      case 19:
        return SYNC_DDL;
      case 20:
        return REQUEST_POOL;
      case 21:
        return V_CPU_CORES;
      case 22:
        return RESERVATION_REQUEST_TIMEOUT;
      case 23:
        return DISABLE_CACHED_READS;
      case 24:
        return DISABLE_OUTERMOST_TOPN;
      case 25:
        return RM_INITIAL_MEM;
      case 26:
        return QUERY_TIMEOUT_S;
      case 27:
        return MAX_BLOCK_MGR_MEMORY;
      case 28:
        return APPX_COUNT_DISTINCT;
      case 29:
        return DISABLE_UNSAFE_SPILLS;
      case 30:
        return EXEC_SINGLE_NODE_ROWS_THRESHOLD;
      case 31:
        return OPTIMIZE_PARTITION_KEY_SCANS;
      case 32:
        return SCHEDULE_RANDOM_REPLICA;
      case 33:
        return SCAN_NODE_CODEGEN_THRESHOLD;
      case 34:
        return DISABLE_STREAMING_PREAGGREGATIONS;
      case 35:
        return RUNTIME_FILTER_MODE;
      case 36:
        return RUNTIME_BLOOM_FILTER_SIZE;
      case 37:
        return RUNTIME_FILTER_WAIT_TIME_MS;
      case 38:
        return DISABLE_ROW_RUNTIME_FILTERING;
      case 39:
        return MAX_NUM_RUNTIME_FILTERS;
      case 40:
        return PARQUET_ANNOTATE_STRINGS_UTF8;
      case 41:
        return PARQUET_FALLBACK_SCHEMA_RESOLUTION;
      case 42:
        return MT_NUM_CORES;
      case 43:
        return S3_SKIP_INSERT_STAGING;
      case 44:
        return RUNTIME_FILTER_MAX_SIZE;
      case 45:
        return RUNTIME_FILTER_MIN_SIZE;
      case 46:
        return PREFETCH_MODE;
      case 47:
        return STRICT_MODE;
      default:
        return null;
    }
  }
}
