/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-16")
public class TExecSummary implements org.apache.thrift.TBase<TExecSummary, TExecSummary._Fields>, java.io.Serializable, Cloneable, Comparable<TExecSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecSummary");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXCH_TO_SENDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("exch_to_sender_map", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField ERROR_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("error_logs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecSummaryTupleSchemeFactory());
  }

  /**
   * 
   * @see TExecState
   */
  public TExecState state; // required
  public com.cloudera.impala.thrift.TStatus status; // optional
  public List<TPlanNodeExecSummary> nodes; // optional
  public Map<Integer,Integer> exch_to_sender_map; // optional
  public List<String> error_logs; // optional
  public TExecProgress progress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TExecState
     */
    STATE((short)1, "state"),
    STATUS((short)2, "status"),
    NODES((short)3, "nodes"),
    EXCH_TO_SENDER_MAP((short)4, "exch_to_sender_map"),
    ERROR_LOGS((short)5, "error_logs"),
    PROGRESS((short)6, "progress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // STATUS
          return STATUS;
        case 3: // NODES
          return NODES;
        case 4: // EXCH_TO_SENDER_MAP
          return EXCH_TO_SENDER_MAP;
        case 5: // ERROR_LOGS
          return ERROR_LOGS;
        case 6: // PROGRESS
          return PROGRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.NODES,_Fields.EXCH_TO_SENDER_MAP,_Fields.ERROR_LOGS,_Fields.PROGRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExecState.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TStatus.class)));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanNodeExecSummary.class))));
    tmpMap.put(_Fields.EXCH_TO_SENDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("exch_to_sender_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ERROR_LOGS, new org.apache.thrift.meta_data.FieldMetaData("error_logs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExecProgress.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecSummary.class, metaDataMap);
  }

  public TExecSummary() {
  }

  public TExecSummary(
    TExecState state)
  {
    this();
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecSummary(TExecSummary other) {
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetStatus()) {
      this.status = new com.cloudera.impala.thrift.TStatus(other.status);
    }
    if (other.isSetNodes()) {
      List<TPlanNodeExecSummary> __this__nodes = new ArrayList<TPlanNodeExecSummary>(other.nodes.size());
      for (TPlanNodeExecSummary other_element : other.nodes) {
        __this__nodes.add(new TPlanNodeExecSummary(other_element));
      }
      this.nodes = __this__nodes;
    }
    if (other.isSetExch_to_sender_map()) {
      Map<Integer,Integer> __this__exch_to_sender_map = new HashMap<Integer,Integer>(other.exch_to_sender_map);
      this.exch_to_sender_map = __this__exch_to_sender_map;
    }
    if (other.isSetError_logs()) {
      List<String> __this__error_logs = new ArrayList<String>(other.error_logs);
      this.error_logs = __this__error_logs;
    }
    if (other.isSetProgress()) {
      this.progress = new TExecProgress(other.progress);
    }
  }

  public TExecSummary deepCopy() {
    return new TExecSummary(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.status = null;
    this.nodes = null;
    this.exch_to_sender_map = null;
    this.error_logs = null;
    this.progress = null;
  }

  /**
   * 
   * @see TExecState
   */
  public TExecState getState() {
    return this.state;
  }

  /**
   * 
   * @see TExecState
   */
  public TExecSummary setState(TExecState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public com.cloudera.impala.thrift.TStatus getStatus() {
    return this.status;
  }

  public TExecSummary setStatus(com.cloudera.impala.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  public java.util.Iterator<TPlanNodeExecSummary> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(TPlanNodeExecSummary elem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<TPlanNodeExecSummary>();
    }
    this.nodes.add(elem);
  }

  public List<TPlanNodeExecSummary> getNodes() {
    return this.nodes;
  }

  public TExecSummary setNodes(List<TPlanNodeExecSummary> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public int getExch_to_sender_mapSize() {
    return (this.exch_to_sender_map == null) ? 0 : this.exch_to_sender_map.size();
  }

  public void putToExch_to_sender_map(int key, int val) {
    if (this.exch_to_sender_map == null) {
      this.exch_to_sender_map = new HashMap<Integer,Integer>();
    }
    this.exch_to_sender_map.put(key, val);
  }

  public Map<Integer,Integer> getExch_to_sender_map() {
    return this.exch_to_sender_map;
  }

  public TExecSummary setExch_to_sender_map(Map<Integer,Integer> exch_to_sender_map) {
    this.exch_to_sender_map = exch_to_sender_map;
    return this;
  }

  public void unsetExch_to_sender_map() {
    this.exch_to_sender_map = null;
  }

  /** Returns true if field exch_to_sender_map is set (has been assigned a value) and false otherwise */
  public boolean isSetExch_to_sender_map() {
    return this.exch_to_sender_map != null;
  }

  public void setExch_to_sender_mapIsSet(boolean value) {
    if (!value) {
      this.exch_to_sender_map = null;
    }
  }

  public int getError_logsSize() {
    return (this.error_logs == null) ? 0 : this.error_logs.size();
  }

  public java.util.Iterator<String> getError_logsIterator() {
    return (this.error_logs == null) ? null : this.error_logs.iterator();
  }

  public void addToError_logs(String elem) {
    if (this.error_logs == null) {
      this.error_logs = new ArrayList<String>();
    }
    this.error_logs.add(elem);
  }

  public List<String> getError_logs() {
    return this.error_logs;
  }

  public TExecSummary setError_logs(List<String> error_logs) {
    this.error_logs = error_logs;
    return this;
  }

  public void unsetError_logs() {
    this.error_logs = null;
  }

  /** Returns true if field error_logs is set (has been assigned a value) and false otherwise */
  public boolean isSetError_logs() {
    return this.error_logs != null;
  }

  public void setError_logsIsSet(boolean value) {
    if (!value) {
      this.error_logs = null;
    }
  }

  public TExecProgress getProgress() {
    return this.progress;
  }

  public TExecSummary setProgress(TExecProgress progress) {
    this.progress = progress;
    return this;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TExecState)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.cloudera.impala.thrift.TStatus)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((List<TPlanNodeExecSummary>)value);
      }
      break;

    case EXCH_TO_SENDER_MAP:
      if (value == null) {
        unsetExch_to_sender_map();
      } else {
        setExch_to_sender_map((Map<Integer,Integer>)value);
      }
      break;

    case ERROR_LOGS:
      if (value == null) {
        unsetError_logs();
      } else {
        setError_logs((List<String>)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((TExecProgress)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case STATUS:
      return getStatus();

    case NODES:
      return getNodes();

    case EXCH_TO_SENDER_MAP:
      return getExch_to_sender_map();

    case ERROR_LOGS:
      return getError_logs();

    case PROGRESS:
      return getProgress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case STATUS:
      return isSetStatus();
    case NODES:
      return isSetNodes();
    case EXCH_TO_SENDER_MAP:
      return isSetExch_to_sender_map();
    case ERROR_LOGS:
      return isSetError_logs();
    case PROGRESS:
      return isSetProgress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecSummary)
      return this.equals((TExecSummary)that);
    return false;
  }

  public boolean equals(TExecSummary that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_exch_to_sender_map = true && this.isSetExch_to_sender_map();
    boolean that_present_exch_to_sender_map = true && that.isSetExch_to_sender_map();
    if (this_present_exch_to_sender_map || that_present_exch_to_sender_map) {
      if (!(this_present_exch_to_sender_map && that_present_exch_to_sender_map))
        return false;
      if (!this.exch_to_sender_map.equals(that.exch_to_sender_map))
        return false;
    }

    boolean this_present_error_logs = true && this.isSetError_logs();
    boolean that_present_error_logs = true && that.isSetError_logs();
    if (this_present_error_logs || that_present_error_logs) {
      if (!(this_present_error_logs && that_present_error_logs))
        return false;
      if (!this.error_logs.equals(that.error_logs))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state.getValue());

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_nodes = true && (isSetNodes());
    list.add(present_nodes);
    if (present_nodes)
      list.add(nodes);

    boolean present_exch_to_sender_map = true && (isSetExch_to_sender_map());
    list.add(present_exch_to_sender_map);
    if (present_exch_to_sender_map)
      list.add(exch_to_sender_map);

    boolean present_error_logs = true && (isSetError_logs());
    list.add(present_error_logs);
    if (present_error_logs)
      list.add(error_logs);

    boolean present_progress = true && (isSetProgress());
    list.add(present_progress);
    if (present_progress)
      list.add(progress);

    return list.hashCode();
  }

  @Override
  public int compareTo(TExecSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExch_to_sender_map()).compareTo(other.isSetExch_to_sender_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExch_to_sender_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exch_to_sender_map, other.exch_to_sender_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_logs()).compareTo(other.isSetError_logs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_logs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_logs, other.error_logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecSummary(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetNodes()) {
      if (!first) sb.append(", ");
      sb.append("nodes:");
      if (this.nodes == null) {
        sb.append("null");
      } else {
        sb.append(this.nodes);
      }
      first = false;
    }
    if (isSetExch_to_sender_map()) {
      if (!first) sb.append(", ");
      sb.append("exch_to_sender_map:");
      if (this.exch_to_sender_map == null) {
        sb.append("null");
      } else {
        sb.append(this.exch_to_sender_map);
      }
      first = false;
    }
    if (isSetError_logs()) {
      if (!first) sb.append(", ");
      sb.append("error_logs:");
      if (this.error_logs == null) {
        sb.append("null");
      } else {
        sb.append(this.error_logs);
      }
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      if (this.progress == null) {
        sb.append("null");
      } else {
        sb.append(this.progress);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (progress != null) {
      progress.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecSummaryStandardSchemeFactory implements SchemeFactory {
    public TExecSummaryStandardScheme getScheme() {
      return new TExecSummaryStandardScheme();
    }
  }

  private static class TExecSummaryStandardScheme extends StandardScheme<TExecSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = com.cloudera.impala.thrift.TExecState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.cloudera.impala.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.nodes = new ArrayList<TPlanNodeExecSummary>(_list16.size);
                TPlanNodeExecSummary _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new TPlanNodeExecSummary();
                  _elem17.read(iprot);
                  struct.nodes.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCH_TO_SENDER_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.exch_to_sender_map = new HashMap<Integer,Integer>(2*_map19.size);
                int _key20;
                int _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readI32();
                  _val21 = iprot.readI32();
                  struct.exch_to_sender_map.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setExch_to_sender_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERROR_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.error_logs = new ArrayList<String>(_list23.size);
                String _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readString();
                  struct.error_logs.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setError_logsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.progress = new TExecProgress();
              struct.progress.read(iprot);
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodes != null) {
        if (struct.isSetNodes()) {
          oprot.writeFieldBegin(NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
            for (TPlanNodeExecSummary _iter26 : struct.nodes)
            {
              _iter26.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exch_to_sender_map != null) {
        if (struct.isSetExch_to_sender_map()) {
          oprot.writeFieldBegin(EXCH_TO_SENDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.exch_to_sender_map.size()));
            for (Map.Entry<Integer, Integer> _iter27 : struct.exch_to_sender_map.entrySet())
            {
              oprot.writeI32(_iter27.getKey());
              oprot.writeI32(_iter27.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_logs != null) {
        if (struct.isSetError_logs()) {
          oprot.writeFieldBegin(ERROR_LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.error_logs.size()));
            for (String _iter28 : struct.error_logs)
            {
              oprot.writeString(_iter28);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.progress != null) {
        if (struct.isSetProgress()) {
          oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
          struct.progress.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecSummaryTupleSchemeFactory implements SchemeFactory {
    public TExecSummaryTupleScheme getScheme() {
      return new TExecSummaryTupleScheme();
    }
  }

  private static class TExecSummaryTupleScheme extends TupleScheme<TExecSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.state.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetNodes()) {
        optionals.set(1);
      }
      if (struct.isSetExch_to_sender_map()) {
        optionals.set(2);
      }
      if (struct.isSetError_logs()) {
        optionals.set(3);
      }
      if (struct.isSetProgress()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.nodes.size());
          for (TPlanNodeExecSummary _iter29 : struct.nodes)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetExch_to_sender_map()) {
        {
          oprot.writeI32(struct.exch_to_sender_map.size());
          for (Map.Entry<Integer, Integer> _iter30 : struct.exch_to_sender_map.entrySet())
          {
            oprot.writeI32(_iter30.getKey());
            oprot.writeI32(_iter30.getValue());
          }
        }
      }
      if (struct.isSetError_logs()) {
        {
          oprot.writeI32(struct.error_logs.size());
          for (String _iter31 : struct.error_logs)
          {
            oprot.writeString(_iter31);
          }
        }
      }
      if (struct.isSetProgress()) {
        struct.progress.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.state = com.cloudera.impala.thrift.TExecState.findByValue(iprot.readI32());
      struct.setStateIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = new com.cloudera.impala.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list32 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodes = new ArrayList<TPlanNodeExecSummary>(_list32.size);
          TPlanNodeExecSummary _elem33;
          for (int _i34 = 0; _i34 < _list32.size; ++_i34)
          {
            _elem33 = new TPlanNodeExecSummary();
            _elem33.read(iprot);
            struct.nodes.add(_elem33);
          }
        }
        struct.setNodesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map35 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.exch_to_sender_map = new HashMap<Integer,Integer>(2*_map35.size);
          int _key36;
          int _val37;
          for (int _i38 = 0; _i38 < _map35.size; ++_i38)
          {
            _key36 = iprot.readI32();
            _val37 = iprot.readI32();
            struct.exch_to_sender_map.put(_key36, _val37);
          }
        }
        struct.setExch_to_sender_mapIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.error_logs = new ArrayList<String>(_list39.size);
          String _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readString();
            struct.error_logs.add(_elem40);
          }
        }
        struct.setError_logsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.progress = new TExecProgress();
        struct.progress.read(iprot);
        struct.setProgressIsSet(true);
      }
    }
  }

}

