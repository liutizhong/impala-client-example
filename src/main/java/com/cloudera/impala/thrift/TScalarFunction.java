/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-16")
public class TScalarFunction implements org.apache.thrift.TBase<TScalarFunction, TScalarFunction._Fields>, java.io.Serializable, Cloneable, Comparable<TScalarFunction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TScalarFunction");

  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PREPARE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("prepare_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLOSE_FN_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("close_fn_symbol", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TScalarFunctionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TScalarFunctionTupleSchemeFactory());
  }

  public String symbol; // required
  public String prepare_fn_symbol; // optional
  public String close_fn_symbol; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYMBOL((short)1, "symbol"),
    PREPARE_FN_SYMBOL((short)2, "prepare_fn_symbol"),
    CLOSE_FN_SYMBOL((short)3, "close_fn_symbol");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYMBOL
          return SYMBOL;
        case 2: // PREPARE_FN_SYMBOL
          return PREPARE_FN_SYMBOL;
        case 3: // CLOSE_FN_SYMBOL
          return CLOSE_FN_SYMBOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PREPARE_FN_SYMBOL,_Fields.CLOSE_FN_SYMBOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREPARE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("prepare_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOSE_FN_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("close_fn_symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TScalarFunction.class, metaDataMap);
  }

  public TScalarFunction() {
  }

  public TScalarFunction(
    String symbol)
  {
    this();
    this.symbol = symbol;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TScalarFunction(TScalarFunction other) {
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
    if (other.isSetPrepare_fn_symbol()) {
      this.prepare_fn_symbol = other.prepare_fn_symbol;
    }
    if (other.isSetClose_fn_symbol()) {
      this.close_fn_symbol = other.close_fn_symbol;
    }
  }

  public TScalarFunction deepCopy() {
    return new TScalarFunction(this);
  }

  @Override
  public void clear() {
    this.symbol = null;
    this.prepare_fn_symbol = null;
    this.close_fn_symbol = null;
  }

  public String getSymbol() {
    return this.symbol;
  }

  public TScalarFunction setSymbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  public String getPrepare_fn_symbol() {
    return this.prepare_fn_symbol;
  }

  public TScalarFunction setPrepare_fn_symbol(String prepare_fn_symbol) {
    this.prepare_fn_symbol = prepare_fn_symbol;
    return this;
  }

  public void unsetPrepare_fn_symbol() {
    this.prepare_fn_symbol = null;
  }

  /** Returns true if field prepare_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepare_fn_symbol() {
    return this.prepare_fn_symbol != null;
  }

  public void setPrepare_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.prepare_fn_symbol = null;
    }
  }

  public String getClose_fn_symbol() {
    return this.close_fn_symbol;
  }

  public TScalarFunction setClose_fn_symbol(String close_fn_symbol) {
    this.close_fn_symbol = close_fn_symbol;
    return this;
  }

  public void unsetClose_fn_symbol() {
    this.close_fn_symbol = null;
  }

  /** Returns true if field close_fn_symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetClose_fn_symbol() {
    return this.close_fn_symbol != null;
  }

  public void setClose_fn_symbolIsSet(boolean value) {
    if (!value) {
      this.close_fn_symbol = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((String)value);
      }
      break;

    case PREPARE_FN_SYMBOL:
      if (value == null) {
        unsetPrepare_fn_symbol();
      } else {
        setPrepare_fn_symbol((String)value);
      }
      break;

    case CLOSE_FN_SYMBOL:
      if (value == null) {
        unsetClose_fn_symbol();
      } else {
        setClose_fn_symbol((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYMBOL:
      return getSymbol();

    case PREPARE_FN_SYMBOL:
      return getPrepare_fn_symbol();

    case CLOSE_FN_SYMBOL:
      return getClose_fn_symbol();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYMBOL:
      return isSetSymbol();
    case PREPARE_FN_SYMBOL:
      return isSetPrepare_fn_symbol();
    case CLOSE_FN_SYMBOL:
      return isSetClose_fn_symbol();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TScalarFunction)
      return this.equals((TScalarFunction)that);
    return false;
  }

  public boolean equals(TScalarFunction that) {
    if (that == null)
      return false;

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    boolean this_present_prepare_fn_symbol = true && this.isSetPrepare_fn_symbol();
    boolean that_present_prepare_fn_symbol = true && that.isSetPrepare_fn_symbol();
    if (this_present_prepare_fn_symbol || that_present_prepare_fn_symbol) {
      if (!(this_present_prepare_fn_symbol && that_present_prepare_fn_symbol))
        return false;
      if (!this.prepare_fn_symbol.equals(that.prepare_fn_symbol))
        return false;
    }

    boolean this_present_close_fn_symbol = true && this.isSetClose_fn_symbol();
    boolean that_present_close_fn_symbol = true && that.isSetClose_fn_symbol();
    if (this_present_close_fn_symbol || that_present_close_fn_symbol) {
      if (!(this_present_close_fn_symbol && that_present_close_fn_symbol))
        return false;
      if (!this.close_fn_symbol.equals(that.close_fn_symbol))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_symbol = true && (isSetSymbol());
    list.add(present_symbol);
    if (present_symbol)
      list.add(symbol);

    boolean present_prepare_fn_symbol = true && (isSetPrepare_fn_symbol());
    list.add(present_prepare_fn_symbol);
    if (present_prepare_fn_symbol)
      list.add(prepare_fn_symbol);

    boolean present_close_fn_symbol = true && (isSetClose_fn_symbol());
    list.add(present_close_fn_symbol);
    if (present_close_fn_symbol)
      list.add(close_fn_symbol);

    return list.hashCode();
  }

  @Override
  public int compareTo(TScalarFunction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepare_fn_symbol()).compareTo(other.isSetPrepare_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepare_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepare_fn_symbol, other.prepare_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClose_fn_symbol()).compareTo(other.isSetClose_fn_symbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClose_fn_symbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.close_fn_symbol, other.close_fn_symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TScalarFunction(");
    boolean first = true;

    sb.append("symbol:");
    if (this.symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.symbol);
    }
    first = false;
    if (isSetPrepare_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("prepare_fn_symbol:");
      if (this.prepare_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.prepare_fn_symbol);
      }
      first = false;
    }
    if (isSetClose_fn_symbol()) {
      if (!first) sb.append(", ");
      sb.append("close_fn_symbol:");
      if (this.close_fn_symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.close_fn_symbol);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (symbol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'symbol' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TScalarFunctionStandardSchemeFactory implements SchemeFactory {
    public TScalarFunctionStandardScheme getScheme() {
      return new TScalarFunctionStandardScheme();
    }
  }

  private static class TScalarFunctionStandardScheme extends StandardScheme<TScalarFunction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TScalarFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREPARE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prepare_fn_symbol = iprot.readString();
              struct.setPrepare_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLOSE_FN_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.close_fn_symbol = iprot.readString();
              struct.setClose_fn_symbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TScalarFunction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.symbol != null) {
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeString(struct.symbol);
        oprot.writeFieldEnd();
      }
      if (struct.prepare_fn_symbol != null) {
        if (struct.isSetPrepare_fn_symbol()) {
          oprot.writeFieldBegin(PREPARE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.prepare_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.close_fn_symbol != null) {
        if (struct.isSetClose_fn_symbol()) {
          oprot.writeFieldBegin(CLOSE_FN_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.close_fn_symbol);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TScalarFunctionTupleSchemeFactory implements SchemeFactory {
    public TScalarFunctionTupleScheme getScheme() {
      return new TScalarFunctionTupleScheme();
    }
  }

  private static class TScalarFunctionTupleScheme extends TupleScheme<TScalarFunction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TScalarFunction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.symbol);
      BitSet optionals = new BitSet();
      if (struct.isSetPrepare_fn_symbol()) {
        optionals.set(0);
      }
      if (struct.isSetClose_fn_symbol()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPrepare_fn_symbol()) {
        oprot.writeString(struct.prepare_fn_symbol);
      }
      if (struct.isSetClose_fn_symbol()) {
        oprot.writeString(struct.close_fn_symbol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TScalarFunction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.symbol = iprot.readString();
      struct.setSymbolIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.prepare_fn_symbol = iprot.readString();
        struct.setPrepare_fn_symbolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.close_fn_symbol = iprot.readString();
        struct.setClose_fn_symbolIsSet(true);
      }
    }
  }

}

